create table
  expense_boards (
    id bigint generated by default as identity primary key,
    creator_id uuid references auth.users not null,
    name text not null,
    is_group boolean not null,
    updated_at timestamp with time zone default timezone ('gmt'::text, now()) not null,
    created_at timestamp with time zone default timezone ('gmt'::text, now()) not null
  );

create table group_members (
  id bigint generated by default as identity primary key, 
  board_id bigint references expense_boards(id),
  user_id uuid references auth.users not null,
  role text not null,
  updated_at timestamp with time zone default timezone('gmt'::text, now()) not null,
  created_at timestamp with time zone default timezone('gmt'::text, now()) not null
);


create table
  expenses (
    id bigint generated by default as identity primary key,
    board_id bigint references expense_boards(id),
    date date not null,
    amount float not null,
    balance float not null,
    description text not null,
    updated_at timestamp with time zone default timezone ('gmt'::text, now()) not null,
    created_at timestamp with time zone default timezone ('gmt'::text, now()) not null
  );

-- Owners have full access to their boards
create policy owner_access on expense_boards for all using (auth.uid () = creator_id);

-- Admins and Shareholders can view boards they belong to
create policy view_access on expense_boards for
select
  using (
    exists (
      select
        1
      from
        group_members
      where
        board_id = expense_boards.id
        and user_id = auth.uid ()
    )
  );

-- Owners and Admins can view, add, edit, and delete expenses
create policy owner_admin_access on expenses for all using (
  exists (
    select
      1
    from
      group_members
    where
      board_id = expenses.board_id
      and user_id = auth.uid ()
      and (
        role = 'Admin'
        or role = 'Owner'
      )
  )
);

-- Shareholders can only view expenses
create policy shareholder_view on expenses for
select
  using (
    exists (
      select
        1
      from
        group_members
      where
        board_id = expenses.board_id
        and user_id = auth.uid ()
        and role = 'Shareholder'
    )
  );

-- Owners can modify group members
create policy owner_modify on group_members for all using (
  exists (
    select
      1
    from
      expense_boards
    where
      id = group_members.board_id
      and creator_id = auth.uid ()
  )
);

-- Admins can add shareholders
create policy admin_add on group_members
  for insert with check (
    exists (
      select 1
      from group_members
      where board_id = group_members.board_id and user_id = auth.uid() and role = 'Admin'
    )
  );

-- Admins can remove shareholders
create policy admin_remove on group_members
  for delete using (
    exists (
      select 1
      from group_members
      where board_id = group_members.board_id and user_id = auth.uid() and role = 'Admin'
    )
  );
